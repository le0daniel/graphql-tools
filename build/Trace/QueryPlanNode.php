<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: report.proto

namespace Trace;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * represents a node in the query plan, under which there is a trace tree for that service fetch.
 * In particular, each fetch node represents a call to an implementing service, and calls to implementing
 * services may not be unique. See https://github.com/apollographql/apollo-server/blob/main/packages/apollo-gateway/src/QueryPlan.ts
 * for more information and details.
 *
 * Generated from protobuf message <code>Trace.QueryPlanNode</code>
 */
class QueryPlanNode extends \Google\Protobuf\Internal\Message
{
    protected $node;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Trace\QueryPlanNode\SequenceNode $sequence
     *     @type \Trace\QueryPlanNode\ParallelNode $parallel
     *     @type \Trace\QueryPlanNode\FetchNode $fetch
     *     @type \Trace\QueryPlanNode\FlattenNode $flatten
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Report::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.Trace.QueryPlanNode.SequenceNode sequence = 1;</code>
     * @return \Trace\QueryPlanNode\SequenceNode|null
     */
    public function getSequence()
    {
        return $this->readOneof(1);
    }

    public function hasSequence()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>.Trace.QueryPlanNode.SequenceNode sequence = 1;</code>
     * @param \Trace\QueryPlanNode\SequenceNode $var
     * @return $this
     */
    public function setSequence($var)
    {
        GPBUtil::checkMessage($var, \Trace\QueryPlanNode\SequenceNode::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.Trace.QueryPlanNode.ParallelNode parallel = 2;</code>
     * @return \Trace\QueryPlanNode\ParallelNode|null
     */
    public function getParallel()
    {
        return $this->readOneof(2);
    }

    public function hasParallel()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.Trace.QueryPlanNode.ParallelNode parallel = 2;</code>
     * @param \Trace\QueryPlanNode\ParallelNode $var
     * @return $this
     */
    public function setParallel($var)
    {
        GPBUtil::checkMessage($var, \Trace\QueryPlanNode\ParallelNode::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.Trace.QueryPlanNode.FetchNode fetch = 3;</code>
     * @return \Trace\QueryPlanNode\FetchNode|null
     */
    public function getFetch()
    {
        return $this->readOneof(3);
    }

    public function hasFetch()
    {
        return $this->hasOneof(3);
    }

    /**
     * Generated from protobuf field <code>.Trace.QueryPlanNode.FetchNode fetch = 3;</code>
     * @param \Trace\QueryPlanNode\FetchNode $var
     * @return $this
     */
    public function setFetch($var)
    {
        GPBUtil::checkMessage($var, \Trace\QueryPlanNode\FetchNode::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.Trace.QueryPlanNode.FlattenNode flatten = 4;</code>
     * @return \Trace\QueryPlanNode\FlattenNode|null
     */
    public function getFlatten()
    {
        return $this->readOneof(4);
    }

    public function hasFlatten()
    {
        return $this->hasOneof(4);
    }

    /**
     * Generated from protobuf field <code>.Trace.QueryPlanNode.FlattenNode flatten = 4;</code>
     * @param \Trace\QueryPlanNode\FlattenNode $var
     * @return $this
     */
    public function setFlatten($var)
    {
        GPBUtil::checkMessage($var, \Trace\QueryPlanNode\FlattenNode::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getNode()
    {
        return $this->whichOneof("node");
    }

}

// Adding a class alias for backwards compatibility with the previous class name.


