<?php declare(strict_types=1);

namespace GraphQlTools\Test\Unit\Definition;

use Closure;
use GraphQL\Type\Definition\Type;
use GraphQlTools\Contract\TypeRegistry;
use GraphQlTools\Definition\Field\Field;
use GraphQlTools\Definition\GraphQlType;
use GraphQlTools\Helper\Registry\AllVisibleSchemaRule;
use PHPUnit\Framework\TestCase;
use Prophecy\PhpUnit\ProphecyTrait;
use Prophecy\Prophecy\ObjectProphecy;

class GraphQlTypeTest extends TestCase
{
    use ProphecyTrait;
    private ObjectProphecy|TypeRegistry $registry;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->registry = $this->prophesize(TypeRegistry::class);
    }

    public function testToDefinition()
    {
        $instance = new class extends GraphQlType {
            protected function fields(TypeRegistry $registry): array
            {
                return [
                    Field::withName('id')
                        ->ofType(Type::id()),
                    Field::withName('lazy')
                        ->ofType(Type::id()),
                ];
            }

            public function getName(): string
            {
                return 'Name';
            }
        };
        $definition = $instance->toDefinition($this->registry->reveal(), new AllVisibleSchemaRule());

        $definition->assertValid();
        self::assertTrue(true);
        self::assertEquals('Name', $instance->getName());
    }
}
