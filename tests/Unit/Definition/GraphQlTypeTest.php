<?php declare(strict_types=1);

namespace GraphQlTools\Test\Unit\Definition;

use Closure;
use GraphQL\Type\Definition\Type;
use GraphQlTools\Contract\TypeRegistry;
use GraphQlTools\Definition\DefinitionException;
use GraphQlTools\Definition\Field\Field;
use GraphQlTools\Definition\GraphQlType;
use PHPUnit\Framework\TestCase;
use Prophecy\PhpUnit\ProphecyTrait;
use Prophecy\Prophecy\ObjectProphecy;

class GraphQlTypeTest extends TestCase
{
    use ProphecyTrait;
    private ObjectProphecy|TypeRegistry $registry;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->registry = $this->prophesize(TypeRegistry::class);
    }

    private function instance(Closure $fields, array $interfaces = []): GraphQlType {
        return new class ($fields, $interfaces) extends GraphQlType {
            public function __construct(private readonly Closure $fields, private readonly array $interfaces)
            {
            }

            protected function fields(TypeRegistry $registry): array
            {
                return ($this->fields)($registry);
            }

            protected function interfaces(): array
            {
                return $this->interfaces;
            }

            protected function description(): string
            {
                return 'some description';
            }

            public static function typeName(): string
            {
                return 'Name';
            }
        };
    }

    public function testToDefinition()
    {
        $definition = $this->instance(fn(TypeRegistry $registry) => [
            Field::withName('id')
                ->ofType(Type::id()),

            'lazy' => fn(string $name) => Field::withName($name)
                ->ofType(Type::id()),
        ])->toDefinition($this->registry->reveal());

        $definition->assertValid();
        self::assertTrue(true);
    }

    public function testFailureOnLazyInvalidName()
    {
        $definition = $this->instance(fn(TypeRegistry $registry) => [
            'invalid' => fn(string $name) => Field::withName('else')
                ->ofType(Type::id()),
        ])->toDefinition($this->registry->reveal());

        $this->expectException(DefinitionException::class);
        $this->expectExceptionMessage('A lazy loaded field MUST have the same name as given in the array. Expected `invalid`, got `else`');
        $definition->assertValid();
        $this->fail('Should fail.');
    }

    public function testFailureOnInvalidLazyField()
    {
        $definition = $this->instance(fn(TypeRegistry $registry) => [
            'invalid' => Field::withName('else')
                ->ofType(Type::id()),
        ])->toDefinition($this->registry->reveal());

        $this->expectException(DefinitionException::class);
        $this->expectExceptionMessage('Expected type of Closure, got GraphQlTools\Definition\Field\Field');
        $definition->assertValid();
        $this->fail('Should fail.');
    }

    public function testTypeName()
    {
        self::assertEquals(
            'Name', $this->instance(fn() => [])::typeName()
        );
    }
}
